{
  "components": [
    {
      "name": "chat-bubble",
      "dependencies": [
        "message-loading"
      ],
      "files": [
        {
          "name": "chat-bubble.tsx",
          "content": "import * as React from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport MessageLoading from \"./message-loading\";\r\nimport { Button, ButtonProps } from \"../button\";\r\n\r\n// ChatBubble\r\nconst chatBubbleVariant = cva(\r\n  \"flex gap-2 max-w-[60%] items-end relative group\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        received: \"self-start\",\r\n        sent: \"self-end flex-row-reverse\",\r\n      },\r\n      layout: {\r\n        default: \"\",\r\n        ai: \"max-w-full w-full items-center\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"received\",\r\n      layout: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\ninterface ChatBubbleProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof chatBubbleVariant> {}\r\n\r\nconst ChatBubble = React.forwardRef<HTMLDivElement, ChatBubbleProps>(\r\n  ({ className, variant, layout, children, ...props }, ref) => (\r\n    <div\r\n      className={cn(\r\n        chatBubbleVariant({ variant, layout, className }),\r\n        \"relative group\",\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    >\r\n      {React.Children.map(children, (child) =>\r\n        React.isValidElement(child) && typeof child.type !== \"string\"\r\n          ? React.cloneElement(child, {\r\n              variant,\r\n              layout,\r\n            } as React.ComponentProps<typeof child.type>)\r\n          : child,\r\n      )}\r\n    </div>\r\n  ),\r\n);\r\nChatBubble.displayName = \"ChatBubble\";\r\n\r\n// ChatBubbleAvatar\r\ninterface ChatBubbleAvatarProps {\r\n  src?: string;\r\n  fallback?: string;\r\n  className?: string;\r\n}\r\n\r\nconst ChatBubbleAvatar: React.FC<ChatBubbleAvatarProps> = ({\r\n  src,\r\n  fallback,\r\n  className,\r\n}) => (\r\n  <Avatar className={className}>\r\n    <AvatarImage src={src} alt=\"Avatar\" />\r\n    <AvatarFallback>{fallback}</AvatarFallback>\r\n  </Avatar>\r\n);\r\n\r\n// ChatBubbleMessage\r\nconst chatBubbleMessageVariants = cva(\"p-4\", {\r\n  variants: {\r\n    variant: {\r\n      received:\r\n        \"bg-secondary text-secondary-foreground rounded-r-lg rounded-tl-lg\",\r\n      sent: \"bg-primary text-primary-foreground rounded-l-lg rounded-tr-lg\",\r\n    },\r\n    layout: {\r\n      default: \"\",\r\n      ai: \"border-t w-full rounded-none bg-transparent\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"received\",\r\n    layout: \"default\",\r\n  },\r\n});\r\n\r\ninterface ChatBubbleMessageProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof chatBubbleMessageVariants> {\r\n  isLoading?: boolean;\r\n}\r\n\r\nconst ChatBubbleMessage = React.forwardRef<\r\n  HTMLDivElement,\r\n  ChatBubbleMessageProps\r\n>(\r\n  (\r\n    { className, variant, layout, isLoading = false, children, ...props },\r\n    ref,\r\n  ) => (\r\n    <div\r\n      className={cn(\r\n        chatBubbleMessageVariants({ variant, layout, className }),\r\n        \"break-words max-w-full whitespace-pre-wrap\",\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    >\r\n      {isLoading ? (\r\n        <div className=\"flex items-center space-x-2\">\r\n          <MessageLoading />\r\n        </div>\r\n      ) : (\r\n        children\r\n      )}\r\n    </div>\r\n  ),\r\n);\r\nChatBubbleMessage.displayName = \"ChatBubbleMessage\";\r\n\r\n// ChatBubbleTimestamp\r\ninterface ChatBubbleTimestampProps\r\n  extends React.HTMLAttributes<HTMLDivElement> {\r\n  timestamp: string;\r\n}\r\n\r\nconst ChatBubbleTimestamp: React.FC<ChatBubbleTimestampProps> = ({\r\n  timestamp,\r\n  className,\r\n  ...props\r\n}) => (\r\n  <div className={cn(\"text-xs mt-2 text-right\", className)} {...props}>\r\n    {timestamp}\r\n  </div>\r\n);\r\n\r\n// ChatBubbleAction\r\ntype ChatBubbleActionProps = ButtonProps & {\r\n  icon: React.ReactNode;\r\n};\r\n\r\nconst ChatBubbleAction: React.FC<ChatBubbleActionProps> = ({\r\n  icon,\r\n  onClick,\r\n  className,\r\n  variant = \"ghost\",\r\n  size = \"icon\",\r\n  ...props\r\n}) => (\r\n  <Button\r\n    variant={variant}\r\n    size={size}\r\n    className={className}\r\n    onClick={onClick}\r\n    {...props}\r\n  >\r\n    {icon}\r\n  </Button>\r\n);\r\n\r\ninterface ChatBubbleActionWrapperProps\r\n  extends React.HTMLAttributes<HTMLDivElement> {\r\n  variant?: \"sent\" | \"received\";\r\n  className?: string;\r\n}\r\n\r\nconst ChatBubbleActionWrapper = React.forwardRef<\r\n  HTMLDivElement,\r\n  ChatBubbleActionWrapperProps\r\n>(({ variant, className, children, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"absolute top-1/2 -translate-y-1/2 flex opacity-0 group-hover:opacity-100 transition-opacity duration-200\",\r\n      variant === \"sent\"\r\n        ? \"-left-1 -translate-x-full flex-row-reverse\"\r\n        : \"-right-1 translate-x-full\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n  </div>\r\n));\r\nChatBubbleActionWrapper.displayName = \"ChatBubbleActionWrapper\";\r\n\r\nexport {\r\n  ChatBubble,\r\n  ChatBubbleAvatar,\r\n  ChatBubbleMessage,\r\n  ChatBubbleTimestamp,\r\n  chatBubbleVariant,\r\n  chatBubbleMessageVariants,\r\n  ChatBubbleAction,\r\n  ChatBubbleActionWrapper,\r\n};\r\n"
        }
      ],
      "type": "components:ui"
    },
    {
      "name": "chat-input",
      "dependencies": [],
      "files": [
        {
          "name": "chat-input.tsx",
          "content": "import * as React from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface ChatInputProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement>{}\r\n\r\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, ChatInputProps>(\r\n  ({ className, ...props }, ref) => (\r\n    <Textarea\r\n      autoComplete=\"off\"\r\n      ref={ref}\r\n      name=\"message\"\r\n      className={cn(\r\n        \"max-h-12 px-4 py-3 bg-background text-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 w-full rounded-md flex items-center h-16 resize-none\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nChatInput.displayName = \"ChatInput\";\r\n\r\nexport { ChatInput };\r\n"
        }
      ],
      "type": "components:ui"
    },
    {
      "name": "chat-message-list",
      "dependencies": [
        "useAutoScroll"
      ],
      "files": [
        {
          "name": "chat-message-list.tsx",
          "content": "import * as React from \"react\";\r\nimport { ArrowDown } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useAutoScroll } from \"@/components/ui/chat/hooks/useAutoScroll\";\r\n\r\ninterface ChatMessageListProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  smooth?: boolean;\r\n}\r\n\r\nconst ChatMessageList = React.forwardRef<HTMLDivElement, ChatMessageListProps>(\r\n  ({ className, children, smooth = false, ...props }, _ref) => {\r\n    const {\r\n      scrollRef,\r\n      isAtBottom,\r\n      autoScrollEnabled,\r\n      scrollToBottom,\r\n      disableAutoScroll,\r\n    } = useAutoScroll({\r\n      smooth,\r\n      content: children,\r\n    });\r\n\r\n    return (\r\n      <div className=\"relative w-full h-full\">\r\n        <div\r\n          className={`flex flex-col w-full h-full p-4 overflow-y-auto ${className}`}\r\n          ref={scrollRef}\r\n          onWheel={disableAutoScroll}\r\n          onTouchMove={disableAutoScroll}\r\n          {...props}\r\n        >\r\n          <div className=\"flex flex-col gap-6\">{children}</div>\r\n        </div>\r\n\r\n        {!isAtBottom && (\r\n          <Button\r\n            onClick={() => {\r\n              scrollToBottom();\r\n            }}\r\n            size=\"icon\"\r\n            variant=\"outline\"\r\n            className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 inline-flex rounded-full shadow-md\"\r\n            aria-label=\"Scroll to bottom\"\r\n          >\r\n            <ArrowDown className=\"h-4 w-4\" />\r\n          </Button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nChatMessageList.displayName = \"ChatMessageList\";\r\n\r\nexport { ChatMessageList };\r\n"
        }
      ],
      "type": "components:ui"
    },
    {
      "name": "expandable-chat",
      "dependencies": [],
      "files": [
        {
          "name": "expandable-chat.tsx",
          "content": "\"use client\";\r\n\r\nimport React, { useRef, useState } from \"react\";\r\nimport { X, MessageCircle } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport type ChatPosition = \"bottom-right\" | \"bottom-left\";\r\nexport type ChatSize = \"sm\" | \"md\" | \"lg\" | \"xl\" | \"full\";\r\n\r\nconst chatConfig = {\r\n  dimensions: {\r\n    sm: \"sm:max-w-sm sm:max-h-[500px]\",\r\n    md: \"sm:max-w-md sm:max-h-[600px]\",\r\n    lg: \"sm:max-w-lg sm:max-h-[700px]\",\r\n    xl: \"sm:max-w-xl sm:max-h-[800px]\",\r\n    full: \"sm:w-full sm:h-full\",\r\n  },\r\n  positions: {\r\n    \"bottom-right\": \"bottom-5 right-5\",\r\n    \"bottom-left\": \"bottom-5 left-5\",\r\n  },\r\n  chatPositions: {\r\n    \"bottom-right\": \"sm:bottom-[calc(100%+10px)] sm:right-0\",\r\n    \"bottom-left\": \"sm:bottom-[calc(100%+10px)] sm:left-0\",\r\n  },\r\n  states: {\r\n    open: \"pointer-events-auto opacity-100 visible scale-100 translate-y-0\",\r\n    closed:\r\n      \"pointer-events-none opacity-0 invisible scale-100 sm:translate-y-5\",\r\n  },\r\n};\r\n\r\ninterface ExpandableChatProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  position?: ChatPosition;\r\n  size?: ChatSize;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nconst ExpandableChat: React.FC<ExpandableChatProps> = ({\r\n  className,\r\n  position = \"bottom-right\",\r\n  size = \"md\",\r\n  icon,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const chatRef = useRef<HTMLDivElement>(null);\r\n\r\n  const toggleChat = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div\r\n      className={cn(`fixed ${chatConfig.positions[position]} z-50`, className)}\r\n      {...props}\r\n    >\r\n      <div\r\n        ref={chatRef}\r\n        className={cn(\r\n          \"flex flex-col bg-background border sm:rounded-lg shadow-md overflow-hidden transition-all duration-250 ease-out sm:absolute sm:w-[90vw] sm:h-[80vh] fixed inset-0 w-full h-full sm:inset-auto\",\r\n          chatConfig.chatPositions[position],\r\n          chatConfig.dimensions[size],\r\n          isOpen ? chatConfig.states.open : chatConfig.states.closed,\r\n          className,\r\n        )}\r\n      >\r\n        {children}\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"icon\"\r\n          className=\"absolute top-2 right-2 sm:hidden\"\r\n          onClick={toggleChat}\r\n        >\r\n          <X className=\"h-4 w-4\" />\r\n        </Button>\r\n      </div>\r\n      <ExpandableChatToggle\r\n        icon={icon}\r\n        isOpen={isOpen}\r\n        toggleChat={toggleChat}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nExpandableChat.displayName = \"ExpandableChat\";\r\n\r\nconst ExpandableChatHeader: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({\r\n  className,\r\n  ...props\r\n}) => (\r\n  <div\r\n    className={cn(\"flex items-center justify-between p-4 border-b\", className)}\r\n    {...props}\r\n  />\r\n);\r\n\r\nExpandableChatHeader.displayName = \"ExpandableChatHeader\";\r\n\r\nconst ExpandableChatBody: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({\r\n  className,\r\n  ...props\r\n}) => <div className={cn(\"flex-grow overflow-y-auto\", className)} {...props} />;\r\n\r\nExpandableChatBody.displayName = \"ExpandableChatBody\";\r\n\r\nconst ExpandableChatFooter: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({\r\n  className,\r\n  ...props\r\n}) => <div className={cn(\"border-t p-4\", className)} {...props} />;\r\n\r\nExpandableChatFooter.displayName = \"ExpandableChatFooter\";\r\n\r\ninterface ExpandableChatToggleProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  icon?: React.ReactNode;\r\n  isOpen: boolean;\r\n  toggleChat: () => void;\r\n}\r\n\r\nconst ExpandableChatToggle: React.FC<ExpandableChatToggleProps> = ({\r\n  className,\r\n  icon,\r\n  isOpen,\r\n  toggleChat,\r\n  ...props\r\n}) => (\r\n  <Button\r\n    variant=\"default\"\r\n    onClick={toggleChat}\r\n    className={cn(\r\n      \"w-14 h-14 rounded-full shadow-md flex items-center justify-center hover:shadow-lg hover:shadow-black/30 transition-all duration-300\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    {isOpen ? (\r\n      <X className=\"h-6 w-6\" />\r\n    ) : (\r\n      icon || <MessageCircle className=\"h-6 w-6\" />\r\n    )}\r\n  </Button>\r\n);\r\n\r\nExpandableChatToggle.displayName = \"ExpandableChatToggle\";\r\n\r\nexport {\r\n  ExpandableChat,\r\n  ExpandableChatHeader,\r\n  ExpandableChatBody,\r\n  ExpandableChatFooter,\r\n};\r\n"
        }
      ],
      "type": "components:ui"
    }
  ],
  "hiddenComponents": [
    {
      "name": "message-loading",
      "dependencies": [],
      "files": [
        {
          "name": "message-loading.tsx",
          "content": "// @hidden\r\nexport default function MessageLoading() {\r\n  return (\r\n    <svg\r\n      width=\"24\"\r\n      height=\"24\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className=\"text-foreground\"\r\n    >\r\n      <circle cx=\"4\" cy=\"12\" r=\"2\" fill=\"currentColor\">\r\n        <animate\r\n          id=\"spinner_qFRN\"\r\n          begin=\"0;spinner_OcgL.end+0.25s\"\r\n          attributeName=\"cy\"\r\n          calcMode=\"spline\"\r\n          dur=\"0.6s\"\r\n          values=\"12;6;12\"\r\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\r\n        />\r\n      </circle>\r\n      <circle cx=\"12\" cy=\"12\" r=\"2\" fill=\"currentColor\">\r\n        <animate\r\n          begin=\"spinner_qFRN.begin+0.1s\"\r\n          attributeName=\"cy\"\r\n          calcMode=\"spline\"\r\n          dur=\"0.6s\"\r\n          values=\"12;6;12\"\r\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\r\n        />\r\n      </circle>\r\n      <circle cx=\"20\" cy=\"12\" r=\"2\" fill=\"currentColor\">\r\n        <animate\r\n          id=\"spinner_OcgL\"\r\n          begin=\"spinner_qFRN.begin+0.2s\"\r\n          attributeName=\"cy\"\r\n          calcMode=\"spline\"\r\n          dur=\"0.6s\"\r\n          values=\"12;6;12\"\r\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\r\n        />\r\n      </circle>\r\n    </svg>\r\n  );\r\n}\r\n"
        }
      ],
      "type": "components:ui"
    },
    {
      "name": "useAutoScroll",
      "dependencies": [],
      "files": [
        {
          "name": "useAutoScroll.tsx",
          "content": "// @hidden\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\ninterface ScrollState {\r\n  isAtBottom: boolean;\r\n  autoScrollEnabled: boolean;\r\n}\r\n\r\ninterface UseAutoScrollOptions {\r\n  offset?: number;\r\n  smooth?: boolean;\r\n  content?: React.ReactNode;\r\n}\r\n\r\nexport function useAutoScroll(options: UseAutoScrollOptions = {}) {\r\n  const { offset = 20, smooth = false, content } = options;\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n  const lastContentHeight = useRef(0);\r\n  const userHasScrolled = useRef(false);\r\n\r\n  const [scrollState, setScrollState] = useState<ScrollState>({\r\n    isAtBottom: true,\r\n    autoScrollEnabled: true,\r\n  });\r\n\r\n  const checkIsAtBottom = useCallback(\r\n    (element: HTMLElement) => {\r\n      const { scrollTop, scrollHeight, clientHeight } = element;\r\n      const distanceToBottom = Math.abs(\r\n        scrollHeight - scrollTop - clientHeight\r\n      );\r\n      return distanceToBottom <= offset;\r\n    },\r\n    [offset]\r\n  );\r\n\r\n  const scrollToBottom = useCallback(\r\n    (instant?: boolean) => {\r\n      if (!scrollRef.current) return;\r\n\r\n      const targetScrollTop =\r\n        scrollRef.current.scrollHeight - scrollRef.current.clientHeight;\r\n\r\n      if (instant) {\r\n        scrollRef.current.scrollTop = targetScrollTop;\r\n      } else {\r\n        scrollRef.current.scrollTo({\r\n          top: targetScrollTop,\r\n          behavior: smooth ? \"smooth\" : \"auto\",\r\n        });\r\n      }\r\n\r\n      setScrollState({\r\n        isAtBottom: true,\r\n        autoScrollEnabled: true,\r\n      });\r\n      userHasScrolled.current = false;\r\n    },\r\n    [smooth]\r\n  );\r\n\r\n  const handleScroll = useCallback(() => {\r\n    if (!scrollRef.current) return;\r\n\r\n    const atBottom = checkIsAtBottom(scrollRef.current);\r\n\r\n    setScrollState((prev) => ({\r\n      isAtBottom: atBottom,\r\n      // Re-enable auto-scroll if at the bottom\r\n      autoScrollEnabled: atBottom ? true : prev.autoScrollEnabled,\r\n    }));\r\n  }, [checkIsAtBottom]);\r\n\r\n  useEffect(() => {\r\n    const element = scrollRef.current;\r\n    if (!element) return;\r\n\r\n    element.addEventListener(\"scroll\", handleScroll, { passive: true });\r\n    return () => element.removeEventListener(\"scroll\", handleScroll);\r\n  }, [handleScroll]);\r\n\r\n  useEffect(() => {\r\n    const scrollElement = scrollRef.current;\r\n    if (!scrollElement) return;\r\n\r\n    const currentHeight = scrollElement.scrollHeight;\r\n    const hasNewContent = currentHeight !== lastContentHeight.current;\r\n\r\n    if (hasNewContent) {\r\n      if (scrollState.autoScrollEnabled) {\r\n        requestAnimationFrame(() => {\r\n          scrollToBottom(lastContentHeight.current === 0);\r\n        });\r\n      }\r\n      lastContentHeight.current = currentHeight;\r\n    }\r\n  }, [content, scrollState.autoScrollEnabled, scrollToBottom]);\r\n\r\n  useEffect(() => {\r\n    const element = scrollRef.current;\r\n    if (!element) return;\r\n\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      if (scrollState.autoScrollEnabled) {\r\n        scrollToBottom(true);\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(element);\r\n    return () => resizeObserver.disconnect();\r\n  }, [scrollState.autoScrollEnabled, scrollToBottom]);\r\n\r\n  const disableAutoScroll = useCallback(() => {\r\n    const atBottom = scrollRef.current\r\n      ? checkIsAtBottom(scrollRef.current)\r\n      : false;\r\n\r\n    // Only disable if not at bottom\r\n    if (!atBottom) {\r\n      userHasScrolled.current = true;\r\n      setScrollState((prev) => ({\r\n        ...prev,\r\n        autoScrollEnabled: false,\r\n      }));\r\n    }\r\n  }, [checkIsAtBottom]);\r\n\r\n  return {\r\n    scrollRef,\r\n    isAtBottom: scrollState.isAtBottom,\r\n    autoScrollEnabled: scrollState.autoScrollEnabled,\r\n    scrollToBottom: () => scrollToBottom(false),\r\n    disableAutoScroll,\r\n  };\r\n}\r\n"
        }
      ],
      "type": "hooks"
    }
  ]
}
